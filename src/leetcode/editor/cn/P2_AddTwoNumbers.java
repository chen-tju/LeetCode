//ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ 
//
// Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ 
//
// ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 0 -> 8
//ÂéüÂõ†Ôºö342 + 465 = 807
// 
// Related Topics ÈìæË°® Êï∞Â≠¶ 
// üëç 4697 üëé 0


package leetcode.editor.cn;

//‰∏§Êï∞Áõ∏Âä†


public class P2_AddTwoNumbers{
    public static void main(String[] args) {
        //ÊµãËØï‰ª£Á†Å
        Solution solution = new P2_AddTwoNumbers().new Solution();
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(3);
        ListNode l2 = new ListNode(5);
        l2.next = new ListNode(6);
        l2.next.next = new ListNode(4);
        ListNode res = solution.addTwoNumbers(l1,l2);
        System.out.println(res.val);
        System.out.println(res.next.val);
        System.out.println(res.next.next.val);

    }
    static class ListNode {
      int val;
      ListNode next;
      ListNode(int x) {
          val = x;
      }
  }
    
//ÂäõÊâ£‰ª£Á†Å
//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode resHead = new ListNode(0);
        ListNode i = l1, j = l2, res = resHead;
        int carry = 0;
        while(i != null || j != null){
            int x = (i != null) ? i.val : 0;
            int y = (j != null) ? j.val : 0;
            carry += x + y;
            res.next = new ListNode(carry % 10);
            carry /= 10;
            res = res.next;
            if(i.next != null){
                i = i.next;
            }
            if(j.next != null){
                j = j.next;
            }
        }
        if(carry != 0){
            res.next = new ListNode(carry);
        }
        return resHead.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}